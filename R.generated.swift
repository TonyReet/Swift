//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `darkColor`.
    static let darkColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkColor")
    
    /// `UIColor(named: "darkColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `AlgorithmConfig.plist`.
    static let algorithmConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "AlgorithmConfig", pathExtension: "plist")
    /// Resource file `BasicConfig.plist`.
    static let basicConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "BasicConfig", pathExtension: "plist")
    /// Resource file `CommonConfig.plist`.
    static let commonConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "CommonConfig", pathExtension: "plist")
    /// Resource file `DarkConfig.plist`.
    static let darkConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "DarkConfig", pathExtension: "plist")
    /// Resource file `MediaConfig.plist`.
    static let mediaConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "MediaConfig", pathExtension: "plist")
    /// Resource file `RxSwiftConfig.plist`.
    static let rxSwiftConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "RxSwiftConfig", pathExtension: "plist")
    /// Resource file `iOS13Config.plist`.
    static let iOS13ConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "iOS13Config", pathExtension: "plist")
    
    /// `bundle.url(forResource: "AlgorithmConfig", withExtension: "plist")`
    static func algorithmConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.algorithmConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "BasicConfig", withExtension: "plist")`
    static func basicConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.basicConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "CommonConfig", withExtension: "plist")`
    static func commonConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.commonConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DarkConfig", withExtension: "plist")`
    static func darkConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.darkConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MediaConfig", withExtension: "plist")`
    static func mediaConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mediaConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RxSwiftConfig", withExtension: "plist")`
    static func rxSwiftConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rxSwiftConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "iOS13Config", withExtension: "plist")`
    static func iOS13ConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.iOS13ConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `iconfont`.
    static let iconfont = Rswift.FontResource(fontName: "iconfont")
    
    /// `UIFont(name: "iconfont", size: ...)`
    static func iconfont(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: iconfont, size: size)
    }
    
    static func validate() throws {
      if R.font.iconfont(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'iconfont' could not be loaded, is 'iconfont.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `darkImg`.
    static let darkImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "darkImg")
    
    /// `UIImage(named: "darkImg", bundle: ..., traitCollection: ...)`
    static func darkImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkImg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 12 localization keys.
    struct localizable {
      /// en translation: Algorithm
      /// 
      /// Locales: en, zh-Hans
      static let algorithm = Rswift.StringResource(key: "Algorithm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Basic
      /// 
      /// Locales: en, zh-Hans
      static let basic = Rswift.StringResource(key: "Basic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Common
      /// 
      /// Locales: en, zh-Hans
      static let common = Rswift.StringResource(key: "Common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dark Mode
      /// 
      /// Locales: en, zh-Hans
      static let darkMode = Rswift.StringResource(key: "DarkMode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: DarkModeBackground
      /// 
      /// Locales: en, zh-Hans
      static let darkModeBackground = Rswift.StringResource(key: "DarkModeBackground", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dynamic
      /// 
      /// Locales: en, zh-Hans
      static let dynamic = Rswift.StringResource(key: "Dynamic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: KeepThread
      /// 
      /// Locales: en, zh-Hans
      static let keepThread = Rswift.StringResource(key: "KeepThread", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Media
      /// 
      /// Locales: en, zh-Hans
      static let media = Rswift.StringResource(key: "Media", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ReusePool
      /// 
      /// Locales: en, zh-Hans
      static let reusePool = Rswift.StringResource(key: "ReusePool", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: RxSwift
      /// 
      /// Locales: en, zh-Hans
      static let rxSwift = Rswift.StringResource(key: "RxSwift", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: SF Symbols
      /// 
      /// Locales: en, zh-Hans
      static let sfSymbols = Rswift.StringResource(key: "SF Symbols", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: iOS13 New feature
      /// 
      /// Locales: en, zh-Hans
      static let iOS13NewFeature = Rswift.StringResource(key: "iOS13 New feature", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: Algorithm
      /// 
      /// Locales: en, zh-Hans
      static func algorithm(_: Void = ()) -> String {
        return NSLocalizedString("Algorithm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Basic
      /// 
      /// Locales: en, zh-Hans
      static func basic(_: Void = ()) -> String {
        return NSLocalizedString("Basic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Common
      /// 
      /// Locales: en, zh-Hans
      static func common(_: Void = ()) -> String {
        return NSLocalizedString("Common", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dark Mode
      /// 
      /// Locales: en, zh-Hans
      static func darkMode(_: Void = ()) -> String {
        return NSLocalizedString("DarkMode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DarkModeBackground
      /// 
      /// Locales: en, zh-Hans
      static func darkModeBackground(_: Void = ()) -> String {
        return NSLocalizedString("DarkModeBackground", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dynamic
      /// 
      /// Locales: en, zh-Hans
      static func dynamic(_: Void = ()) -> String {
        return NSLocalizedString("Dynamic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: KeepThread
      /// 
      /// Locales: en, zh-Hans
      static func keepThread(_: Void = ()) -> String {
        return NSLocalizedString("KeepThread", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Media
      /// 
      /// Locales: en, zh-Hans
      static func media(_: Void = ()) -> String {
        return NSLocalizedString("Media", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ReusePool
      /// 
      /// Locales: en, zh-Hans
      static func reusePool(_: Void = ()) -> String {
        return NSLocalizedString("ReusePool", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: RxSwift
      /// 
      /// Locales: en, zh-Hans
      static func rxSwift(_: Void = ()) -> String {
        return NSLocalizedString("RxSwift", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SF Symbols
      /// 
      /// Locales: en, zh-Hans
      static func sfSymbols(_: Void = ()) -> String {
        return NSLocalizedString("SF Symbols", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iOS13 New feature
      /// 
      /// Locales: en, zh-Hans
      static func iOS13NewFeature(_: Void = ()) -> String {
        return NSLocalizedString("iOS13 New feature", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
